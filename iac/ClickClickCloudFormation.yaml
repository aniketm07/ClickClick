AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for creating ClickClick application

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: ClickClickVPC

  # Internet Gateway
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: 'ClickClickInternetGateway'

  # Attach Internet Gateway to VPC
  AttachInternetGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnet 1
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'public-subnet-1-clickclick'
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''

  # Public Subnet 2
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'public-subnet-2-clickclick'
      AvailabilityZone: !Select 
        - 1
        - !GetAZs ''

  # Private Subnet 1
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: 'private-subnet-1-clickclick'

  # Private Subnet 2
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 1
        - !GetAZs ''
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: 'private-subnet-2-clickclick'

  NatGatewayEIP:
    Type: 'AWS::EC2::EIP'
    DependsOn: AttachInternetGateway
    Properties:
      Domain: vpc

  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
  
  # Route Table
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ClickClickRouteTable

  # Route to Internet Gateway
  DefaultPublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachInternetGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate Route Table with Public Subnet 1
  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTable

  # Associate Route Table with Public Subnet 2
  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTable
  
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: 'private-route-table-clickclick'

  DefaultPrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2
  
  ## Security Groups
  # Application Load Balancer Security Group
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ALBSecurityGroup
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  
  # Container Security Group to allow traffic from ALB
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ContainerSecurityGroup
      GroupDescription: Container Security Group to allow traffic from ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0 
          ToPort: 65535 
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId

  # DynamoDB Tables
  PostsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ClickClick-Posts
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
        - Key: Name
          Value: ClickClick-Posts
        - Key: Environment
          Value: Production

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ClickClick-Users
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: email
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
        - Key: Name
          Value: ClickClick-Users
        - Key: Environment
          Value: Production

  # SNS Topic
  PostsSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: ClickClick-Posts-Topic
      TopicName: ClickClick-Posts-Topic

  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    DependsOn: AutoConfirmUserLambda
    Properties:
      UserPoolName: ClickClick
      UsernameAttributes: []
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      MfaConfiguration: "OFF"
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      LambdaConfig:
        PreSignUp: !GetAtt AutoConfirmUserLambda.Arn
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UserPoolAddOns:
        AdvancedSecurityMode: "OFF"
      Schema:
        - Name: email
          Required: true
          AttributeDataType: String

  # Add the Lambda function for user auto-confirmation
  AutoConfirmUserLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ClickClick-AutoConfirmUser
      Handler: index.handler
      Role: arn:aws:iam::840412434929:role/LabRole
      Code:
        S3Bucket: "clickclick-lambdas"
        S3Key: "users/auto-confirm-user-v1.zip" # Replace with the Auto-Confirm User Lambda S3 key
      Runtime: nodejs20.x
      Timeout: 30 
  
  # Add the necessary permission for Cognito to invoke the Lambda trigger
  AutoConfirmUserLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AutoConfirmUserLambda
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}

  # Cognito User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ClickClickClient
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      AllowedOAuthFlowsUserPoolClient: false

  # Lambda Function for Register User
  RegisterUserLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ClickClick-RegisterUser
      Handler: index.handler
      Role: arn:aws:iam::840412434929:role/LabRole
      Code:
        S3Bucket: "clickclick-lambdas"
        S3Key: "users/register-user-v1.zip" # Replace with the Register Lambda S3 key
      Runtime: nodejs20.x
      Timeout: 30
      Environment:
        Variables:
          USER_TABLE: !Ref UsersTable
          COGNITO_CLIENT_ID: !Ref UserPoolClient
    DependsOn:
      - UsersTable
      - UserPool
      - UserPoolClient

  # Lambda Function for Login
  LoginLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ClickClick-Login
      Handler: index.handler
      Role: arn:aws:iam::840412434929:role/LabRole
      Code:
        S3Bucket: "clickclick-lambdas"
        S3Key: "users/login-user-v1.zip" # Replace with the Login Lambda S3 key
      Runtime: nodejs20.x
      Timeout: 30
      Environment:
        Variables:
          COGNITO_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ID: !Ref UserPool
    DependsOn:
      - UserPool
      - UserPoolClient
  
  # Lambda Function to get User by email
  GetUserByEmailLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ClickClick-GetUserByEmail
      Handler: index.handler
      Role: arn:aws:iam::840412434929:role/LabRole
      Code:
        S3Bucket: "clickclick-lambdas"
        S3Key: "users/get-user-by-email-v1.zip" # Replace with the Get User Lambda S3 key
      Runtime: nodejs20.x
      Timeout: 30
      Environment:
        Variables:
          USER_TABLE: !Ref UsersTable
    DependsOn:
      - UsersTable
  
  # Lambda Function to Subscribe User to Tags of Posts
  SubscribeUserToTagsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ClickClick-SubscribeUserToTags
      Handler: index.handler
      Role: arn:aws:iam::840412434929:role/LabRole
      Code:
        S3Bucket: "clickclick-lambdas"
        S3Key: "users/subscribe-user-to-tags-v1.zip" # Replace with the Subscribe User to Tags Lambda S3 key
      Runtime: nodejs20.x
      Timeout: 30
      Environment:
        Variables:
          USER_TABLE: !Ref UsersTable
          TOPIC_ARN: !Ref PostsSNSTopic
    DependsOn:
      - UsersTable
      - PostsSNSTopic

  # Lambda Function to Create a Post
  CreatePostLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ClickClick-CreatePost
      Handler: index.handler
      Role: arn:aws:iam::840412434929:role/LabRole
      Code:
        S3Bucket: "clickclick-lambdas"
        S3Key: "posts/create-post-v1.zip" # Replace with the Create Post Lambda S3 key
      Runtime: nodejs20.x
      Timeout: 30
      Environment:
        Variables:
          POST_TABLE: !Ref PostsTable
          TOPIC_ARN: !Ref PostsSNSTopic
          POST_IMAGE_BUCKET_NAME: clickclick-posts
    DependsOn:
      - PostsTable
      - PostsSNSTopic
  
  # Lambda Function to Get All Posts
  GetAllPostsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ClickClick-GetAllPosts
      Handler: index.handler
      Role: arn:aws:iam::840412434929:role/LabRole
      Code:
        S3Bucket: "clickclick-lambdas"
        S3Key: "posts/get-all-posts-v1.zip" # Replace with the Get All Posts Lambda S3 key
      Runtime: nodejs20.x
      Timeout: 30
      Environment:
        Variables:
          POST_TABLE: !Ref PostsTable
    DependsOn:
      - PostsTable
  
  # Lambda Function to Get All Post Tags
  GetAllPostTagsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ClickClick-GetAllPostTags
      Handler: index.handler
      Role: arn:aws:iam::840412434929:role/LabRole
      Code:
        S3Bucket: "clickclick-lambdas"
        S3Key: "posts/get-all-post-tags-v1.zip" # Replace with the Get All Post Tags Lambda S3 key
      Runtime: nodejs20.x
      Timeout: 30
      Environment:
        Variables:
          POST_TABLE: !Ref PostsTable
    DependsOn:
      - PostsTable
  
  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ClickClickAPI
      Description: API Gateway for ClickClick
  
  # Cognito Authorizer for API Gateway
  ClickClickCognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: ClickClickCognitoAuthorizer
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref ApiGateway
      Type: COGNITO_USER_POOLS
      ProviderARNs:
        - !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}
  
  # /auth resource
  AuthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: auth
      RestApiId: !Ref ApiGateway
    DependsOn: ApiGateway

  # /api resource
  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: api
      RestApiId: !Ref ApiGateway
    DependsOn: ApiGateway

  # /auth/register resource
  RegistrationResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref AuthResource
      PathPart: register
      RestApiId: !Ref ApiGateway
    DependsOn: AuthResource
  
  # POST Method for /auth/register
  RegistrationMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref RegistrationResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RegisterUserLambdaArn}/invocations
          - RegisterUserLambdaArn: !GetAtt RegisterUserLambda.Arn
    DependsOn: 
      - RegistrationResource
      - RegisterUserLambda
  
  # Enable CORS for /auth/register
  RegistrationMethodOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref RegistrationResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        PassthroughBehavior: WHEN_NO_MATCH
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # /auth/login resource
  LoginResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref AuthResource
      PathPart: login
      RestApiId: !Ref ApiGateway
    DependsOn: AuthResource
  
  # POST Method for /auth/login
  LoginMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref LoginResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoginLambdaArn}/invocations
          - LoginLambdaArn: !GetAtt LoginLambda.Arn
    DependsOn: 
      - LoginResource
      - LoginLambda
  
  # Enable CORS for /auth/login
  LoginMethodOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref LoginResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        PassthroughBehavior: WHEN_NO_MATCH
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  
  # /api/users resource
  UsersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ApiResource
      PathPart: users
      RestApiId: !Ref ApiGateway
    DependsOn: ApiResource

  # /api/users/{email} resource
  UsersByEmailResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref UsersResource
      PathPart: "{email}"
      RestApiId: !Ref ApiGateway
    DependsOn: UsersResource
  
  # GET Method for /api/users/{email}
  UsersByEmailResourceMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ClickClickCognitoAuthorizer
      HttpMethod: GET
      ResourceId: !Ref UsersByEmailResource
      RestApiId: !Ref ApiGateway
      RequestParameters:
        method.request.path.email: true
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserByEmailLambdaArn}/invocations
          - GetUserByEmailLambdaArn: !GetAtt GetUserByEmailLambda.Arn
        IntegrationResponses:
          - StatusCode: 200
        RequestParameters:
          integration.request.path.email: 'method.request.path.email'
        RequestTemplates:
          application/json: |
            {
              "email": "$input.params('email')"
            }
      MethodResponses:
        - StatusCode: 200
    DependsOn: 
      - UsersByEmailResource
      - GetUserByEmailLambda
  
  # Enable CORS for /api/users/{email} (GET)
  UsersByEmailResourceOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref UsersByEmailResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        PassthroughBehavior: WHEN_NO_MATCH
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # /api/users/subscribe resource
  SubscribeUserToTagsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref UsersResource
      PathPart: subscribe
      RestApiId: !Ref ApiGateway
    DependsOn: UsersResource
  
  # PATCH Method for /api/users/subscribe
  SubscribeUserToTagsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ClickClickCognitoAuthorizer
      HttpMethod: PATCH
      ResourceId: !Ref SubscribeUserToTagsResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SubscribeUserToTagsLambdaArn}/invocations
          - SubscribeUserToTagsLambdaArn: !GetAtt SubscribeUserToTagsLambda.Arn
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200
    DependsOn: 
      - SubscribeUserToTagsResource
      - SubscribeUserToTagsLambda
  
  # Enable CORS for /api/users/subscribe (PATCH)
  SubscribeUserToTagsResourceOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref SubscribeUserToTagsResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PATCH'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        PassthroughBehavior: WHEN_NO_MATCH
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # /api/posts resource
  PostsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ApiResource
      PathPart: posts
      RestApiId: !Ref ApiGateway
    DependsOn: ApiResource
  
  # POST Method for /api/posts
  CreatePostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ClickClickCognitoAuthorizer
      HttpMethod: POST
      ResourceId: !Ref PostsResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreatePostLambdaArn}/invocations
          - CreatePostLambdaArn: !GetAtt CreatePostLambda.Arn
    DependsOn: 
      - PostsResource
      - CreatePostLambda
  
  # GET Method for /api/posts
  GetAllPostsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ClickClickCognitoAuthorizer
      HttpMethod: GET
      ResourceId: !Ref PostsResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAllPostsLambdaArn}/invocations
          - GetAllPostsLambdaArn: !GetAtt GetAllPostsLambda.Arn
    DependsOn: 
      - PostsResource
      - GetAllPostsLambda

  # Enable CORS for /api/posts
  PostsMethodOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref PostsResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        PassthroughBehavior: WHEN_NO_MATCH
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # /api/posts/tags resource
  PostsTagsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref PostsResource
      PathPart: tags
      RestApiId: !Ref ApiGateway
    DependsOn: PostsResource
  
  # GET Method for /api/posts/tags
  GetAllPostTagsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ClickClickCognitoAuthorizer
      HttpMethod: GET
      ResourceId: !Ref PostsTagsResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAllPostTagsLambdaArn}/invocations
          - GetAllPostTagsLambdaArn: !GetAtt GetAllPostTagsLambda.Arn
    DependsOn: 
      - PostsTagsResource
      - GetAllPostTagsLambda

  # Enable CORS for /api/posts/tags
  GetAllPostTagsMethodOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref PostsTagsResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        PassthroughBehavior: WHEN_NO_MATCH
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  
  # Permissions to invoke Lambda from API Gateway
  RegisterUserLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RegisterUserLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/auth/register
    DependsOn: RegistrationMethod
  
  LoginUserLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LoginLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/auth/login
    DependsOn: LoginMethod
  
  GetUserByEmailLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetUserByEmailLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/GET/api/users/{email}
    DependsOn: UsersByEmailResourceMethod
  
  SubscribeUserToTagsLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SubscribeUserToTagsLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/PATCH/api/users/subscribe
    DependsOn: SubscribeUserToTagsMethod
  
  CreatePostLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CreatePostLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/api/posts
    DependsOn: CreatePostMethod
  
  GetAllPostsLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetAllPostsLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/GET/api/posts
    DependsOn: GetAllPostsMethod
  
  GetAllPostTagsLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetAllPostTagsLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/GET/api/posts/tags
    DependsOn: GetAllPostTagsMethod
  
  # Deployment of API to prod stage
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod
    DependsOn:
      - RegistrationMethod
      - RegistrationMethodOptions
      - LoginMethod
      - LoginMethodOptions
      - UsersByEmailResourceMethod
      - SubscribeUserToTagsMethod
      - SubscribeUserToTagsResourceOptions
      - CreatePostMethod
      - GetAllPostsMethod
      - PostsMethodOptions
      - GetAllPostTagsMethod
      - GetAllPostTagsMethodOptions
  
  ## ECS - Application Load Balancer
  # ALB
  ClickClickLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Type: application
      Name: 'clickclick-alb'
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
  
  # Listener
  LoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    DependsOn:
      - ClickClickLoadBalancer
      - ClickClickFrontendTargetGroup
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ClickClickFrontendTargetGroup
      LoadBalancerArn: !Ref ClickClickLoadBalancer
      Port: '80'
      Protocol: HTTP
  
  # Target Group
  ClickClickFrontendTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: 'ClickClickFrontendTG'
      VpcId: !Ref VPC
      Port: 3000
      Protocol: HTTP
      TargetType: ip

  ## ECS - Frontend
  # ECS Cluster
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: 'ClickClick-Cluster'
  
  # Task Definition
  ClickClickTaskFamilyForECS:
    Type: 'AWS::ECS::TaskDefinition'
    DependsOn:
      - ClickClickLoadBalancer
      - ApiGateway
    Properties:
      NetworkMode: awsvpc
      Family: ClickClickTaskFamilyForECS
      TaskRoleArn: arn:aws:iam::840412434929:role/LabRole
      ExecutionRoleArn: arn:aws:iam::840412434929:role/LabRole
      RequiresCompatibilities:
        - FARGATE
      Cpu: 1024
      Memory: 2048
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX
      ContainerDefinitions:
        - Name: clickclick-frontend-container
          Image: 840412434929.dkr.ecr.us-east-1.amazonaws.com/clickclick-frontend:latest
          Cpu: 512
          PortMappings:
            - ContainerPort: 3000
              HostPort: 3000
          Memory: 1024
          Essential: true
          Environment:
            - Name: VITE_API_APIGATEWAY_URL
              Value: !Join
              - ""
              - - "https://"
                - !Ref ApiGateway
                - ".execute-api."
                - !Ref "AWS::Region"
                - ".amazonaws.com"
            - Name: VITE_API_STAGE
              Value: "prod"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: 'true'
              awslogs-group:  '/ecs/clickclick-logs'
              awslogs-region: us-east-1
              awslogs-stream-prefix: 'ecs/clickclick-frontend'
  
  # ECS Service
  ClickClickService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref ECSCluster
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Base: 0
          Weight: 1
      TaskDefinition: !Ref ClickClickTaskFamilyForECS
      ServiceName: clickclick-frontend-service
      SchedulingStrategy: REPLICA
      DesiredCount: 2
      LoadBalancers:
        - ContainerName: clickclick-frontend-container
          ContainerPort: 3000
          TargetGroupArn: !Ref ClickClickFrontendTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ContainerSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      PlatformVersion: LATEST
    DependsOn:
      - LoadBalancerListener

Outputs:
  ApiGatewayUrl:
    Description: "API Gateway URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/"
  LoadBalancerDomainName:
    Description:  Load Balancer URL
    Value: !GetAtt ClickClickLoadBalancer.DNSName
